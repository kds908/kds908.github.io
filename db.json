{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/imgs/diaoyu1.jpeg","path":"imgs/diaoyu1.jpeg","modified":1,"renderable":0},{"_id":"source/imgs/http.png","path":"imgs/http.png","modified":1,"renderable":0},{"_id":"source/imgs/vue2.png","path":"imgs/vue2.png","modified":1,"renderable":0},{"_id":"source/imgs/vue1.png","path":"imgs/vue1.png","modified":1,"renderable":0},{"_id":"source/imgs/vue3.png","path":"imgs/vue3.png","modified":1,"renderable":0},{"_id":"source/imgs/vue5.png","path":"imgs/vue5.png","modified":1,"renderable":0},{"_id":"source/imgs/vue6.jpg","path":"imgs/vue6.jpg","modified":1,"renderable":0},{"_id":"source/imgs/vue4.png","path":"imgs/vue4.png","modified":1,"renderable":0},{"_id":"source/imgs/vue7.png","path":"imgs/vue7.png","modified":1,"renderable":0},{"_id":"source/imgs/vue8.png","path":"imgs/vue8.png","modified":1,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/imgs/2.jpg","path":"imgs/2.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/imgs/1.jpg","path":"imgs/1.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/imgs/3.jpg","path":"imgs/3.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/imgs/4.jpg","path":"imgs/4.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/imgs/5.jpg","path":"imgs/5.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/imgs/6.jpg","path":"imgs/6.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/imgs/7.jpg","path":"imgs/7.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/imgs/8.jpg","path":"imgs/8.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/imgs/9.jpg","path":"imgs/9.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"491ce92379e394fc9b7d872106bf99817f91d5bc","modified":1638840249000},{"_id":"source/_posts/cs.md","hash":"a15149c7f2157a7b9095a6ad75100fd77607814b","modified":1643077212882},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1638778196000},{"_id":"source/_posts/js-数据类型.md","hash":"72d8d5a1c8a7938d4df933de27533b906afc837d","modified":1638840100000},{"_id":"source/about/index.md","hash":"23634680c022bd7c2a9006ebf7a30af7f8cfea17","modified":1638840502000},{"_id":"source/_posts/js-深拷贝与浅拷贝.md","hash":"5352026824efdc1024b712a936866d02160db640","modified":1643076265752},{"_id":"source/_posts/js-语法收集.md","hash":"5c1e6994b68bbf494e79c2671d10f0e9291efd12","modified":1638840100000},{"_id":"source/categories/index.md","hash":"748df9c9e572e59f9e2d127cb61cb9eafce46eb1","modified":1638840249000},{"_id":"source/tags/index.md","hash":"2dda1908d360549277ac5817adc1302192a19b14","modified":1638840249000},{"_id":"source/link/index.md","hash":"f3f9bf64ebc4f248f9f42a0f59f93f15c886f214","modified":1638840249000},{"_id":"source/imgs/vue3.png","hash":"a290de776571373f5e44b70551ed8ed1c3d28b6b","modified":1638840249000},{"_id":"source/imgs/vue5.png","hash":"d0cfaca2f2011b7e241cc416847faf5265201773","modified":1638840249000},{"_id":"source/imgs/vue4.png","hash":"fb4c95f3f67fc071a3a4da0c36bc2dc18a48635d","modified":1638840249000},{"_id":"source/imgs/vue7.png","hash":"8734e172c954b214aef5ee70139f179792243fa1","modified":1638840249000},{"_id":"source/imgs/vue8.png","hash":"2076a9458eaed0d74a34d37cae500625770aad9c","modified":1638840249000},{"_id":"source/imgs/http.png","hash":"2ad1c0a60a61eda7217afe64ec6dd75296063569","modified":1638840249000},{"_id":"source/imgs/vue1.png","hash":"7cb485ff76211d8aefd1b8a9898ad9390b5e6932","modified":1638840249000},{"_id":"source/imgs/vue2.png","hash":"d236c2ae0b800ce70109435829ec6279d3c4ca03","modified":1638840249000},{"_id":"source/imgs/vue6.jpg","hash":"0815632419332ab4df6fc1816ebac18fc16582ab","modified":1638840249000},{"_id":"source/imgs/diaoyu1.jpeg","hash":"ccfa2ef2d75c6c3bbcf8966b616d0e7b7668d407","modified":1638840249000},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1638778544000},{"_id":"themes/butterfly/README_CN.md","hash":"459d6f3200863021bee1fe72a719aef236fb4090","modified":1638778544000},{"_id":"themes/butterfly/README.md","hash":"cedd13fcd8c75a68742265dd8eced4087e940ffd","modified":1638778544000},{"_id":"themes/butterfly/_config.yml","hash":"c284f5de0de2803e9d296e7e3c7e2f76b93ae819","modified":1638842550000},{"_id":"themes/butterfly/package.json","hash":"333603963b3d2cedb643def8a9955f6d540f5d95","modified":1638778544000},{"_id":"themes/butterfly/languages/default.yml","hash":"7ca673fb629ea74f5ba5e75b4f0f95248cfb5090","modified":1638778544000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"741e522b2387f94764a73844e7b084cc7e927c54","modified":1638778544000},{"_id":"themes/butterfly/languages/en.yml","hash":"cd333235ff1648a6bf58dfafc81f2c57672a15a5","modified":1638778544000},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1638778544000},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"79a50c40d9f5463f1fa42aa870ac6b8b84540412","modified":1638778544000},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1638778544000},{"_id":"themes/butterfly/layout/category.pug","hash":"60c1b795b6e227b5dd81963b51d29d1b81d0bf49","modified":1638778544000},{"_id":"themes/butterfly/layout/page.pug","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1638778544000},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1638778544000},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1638778544000},{"_id":"themes/butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1638778544000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"4156224c47bfc2482281ac4e4df701c30476ff00","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"7d378e328a53cc99d5acc9682dce53f5eb61537d","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1377952022ee0a9eaa7a2fd1098f1571efc468d9","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8dafc2dcd8c33f70a546fee443f0b6d80b3cd243","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"2d0453adf92a3fd3466cf0793f14685d17b8b51d","modified":1638778544000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1638778544000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1638778544000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"018aa446265fe627301b1d53d7cba4f4ff1960ac","modified":1638778544000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1638778544000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"4cc2d517195c8779471d326ada09f9371cbad4dd","modified":1638778544000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"9821872007cf57efae4b728dc575ef9d004547bb","modified":1638778544000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1638778544000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1638778544000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"65f2442e04c4defd16e7c1e67701d3bb41d9577a","modified":1638778544000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1638778544000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"b816ded1451f28c7c54151ffe6c259b110253ae3","modified":1638778544000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"94826ea6bcc4d2304199adae12c4e2b272caf529","modified":1638778544000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"21556f9cb412ddc500ad12ecfd419f3ea6c9f663","modified":1638778544000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":1638778544000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1638778544000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1638778544000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"35f073021db93699fcac9ef351e26c59c31aadf7","modified":1638778544000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1638778544000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1638778544000},{"_id":"themes/butterfly/source/css/var.styl","hash":"40c3f64422205a24e68ce1ad8fe8163f24fdd525","modified":1638778544000},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1638778544000},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1638778544000},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1638778544000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1638778544000},{"_id":"themes/butterfly/source/js/main.js","hash":"b244f28124a46d7f1e8ef76ba6e925289691f93b","modified":1638778544000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1638778544000},{"_id":"themes/butterfly/source/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1638778544000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1638778544000},{"_id":"themes/butterfly/source/imgs/.DS_Store","hash":"adbea7961dbd857ebcf78dd37f29ffa5ef16e943","modified":1638842515000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1638778544000},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"4def0aab9e2172ad1f29abd1535d8e08ff23aa0b","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"90d01b88d0f406d00184960b1afe9230aec2ebe6","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"889ef16fa34a39e5533bc170e62f20f3450cc522","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"e55f8bdb876d5429a908498db1307b94094c0d06","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"24370508ee87f14418e8f06e9d79ad8c52a342c4","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"c205b9fd72b2fe19e6d15c5b5ab0fb38c653032e","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"92f81a437c9db49f7ebcf608bc09488ecdb55a21","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"4c3c5cb69b3aead8c232cb0fbc251929f28aad75","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"1f30952fed73dec21b42e2e30b7fe2e84618d2e4","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"dbec869c62135695495703a29ad7655e9965d461","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"93d4ebc7dc8228c7a10ddeb5a553d0dcdabbe145","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"b53a2d4f9c37b375a4446d2273dcfb7712d91b3e","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"5b404356f311d2ee36478291ca3553210867b738","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"933cb710d2dbcea25c6426a57c6f49d2f48b792c","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d50e5c22cd6bc3c378bc581918136746cfa3447f","modified":1638778544000},{"_id":"themes/butterfly/source/imgs/3.jpg","hash":"663154c0e3f2ceb55222181ee1afbc198e61214f","modified":1638842515000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"0366c658cdcff839aa1df2e2d252a03a53fd427e","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"27afd2274bd5f2cbbf1bad9f0afe2b2b72c213ca","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"ae9336bf31cdad08ff586ead4295912a96563c76","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"b5525891f6affd02c1ea3b2327c026882efe428b","modified":1638778544000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"eda47f3e807a466ba8275627ea936c5100c43818","modified":1638778544000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"85e72c70a0cef29e40be1968f5d23b06c6f8e3aa","modified":1638778544000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"e211efbd1952d4b1b881287aa43423133c1d166e","modified":1638778544000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"fa4b87e7b29bdd1f09eb1a30e06ba74b224f0ba2","modified":1638778544000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"7feb755ca7c22da36bbad11e74ecd95fdcf3b879","modified":1638778544000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"f1b63892baafa48ab872bc79671d57aafd511f6c","modified":1638778544000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1638778544000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"dd8cdf639ba2b726437c77fa7aa8d5edbabe8f9b","modified":1638778544000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"90fe01c968696a9f791cb2b84fca621cbbb56f47","modified":1638778544000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"7d18a7be9cfea65091de3ef00014063d2d649912","modified":1638778544000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"98235fcda3b87ad6f7e91eafbed94d0d6ae847ca","modified":1638778544000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"d748951d9fbcd04dda839085af78b01b8fa04cba","modified":1638778544000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"0551c5893d1589a3d17ce161e50ecb1d724cc6e8","modified":1638778544000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"7a072589e6097dbe942783131964f2372fdf1eb6","modified":1638778544000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"ea1ba40dd5954c2ed718a126336fb7f94da4e66f","modified":1638778544000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"2c5fb77c448ce0a734040c8ce532b28fed688899","modified":1638778544000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4e629f510b73f998ab208b739c5bd7dcd168d1a7","modified":1638778544000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"978c397d0966eaf9e6e2afd13866f8f4900b509f","modified":1638778544000},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"b0488ceacde74af139d66c8db5cb36cc21737b9b","modified":1638778544000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"f59a9a0059d5261251bdd6de45aa97dd2d11e633","modified":1638778544000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":1638778544000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"97fec1e814f88237862f4d800a35362b802f6625","modified":1638778544000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"7c4152162a03aa8331a783df5695e4ebbb816a8c","modified":1638778544000},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"2cc49d3f6a6beb9f7bff93e292f88aa5681da1d0","modified":1638778544000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"e554549f0a0ae85362f0b0e8687981741f486f6b","modified":1638778544000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9a881c031f463c486bd25248c2814fd09f97892b","modified":1638778544000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"917e0e399e117217184ca63d3eb5c4843bcccf7b","modified":1638778544000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"f168f5c669978f633abe118cdcc4a12cfc883c01","modified":1638778544000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"6befe4c51b86d0c1de130beeecad9e28d6442713","modified":1638778544000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"1c3f9d7efc3b9dfcfa8926a1132d0c44ffc7d4b2","modified":1638778544000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"53ecae272e16223a436c497abbf25dd5f0fc4aaa","modified":1638778544000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1638778544000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"21964fdd6d74ffbea519418bab65024aee5f3736","modified":1638778544000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"f741e85295ce15c70a6027ec15a542636dd5dcca","modified":1638778544000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":1638778544000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1638778544000},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1638778544000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"86fee274a62f7f034547342930f445c47378eb55","modified":1638778544000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1638778544000},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"b1429e9f80ef6b9a77434819ffb87d90bdad25e8","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2e52c64e89f16267596a8465841dd46f51820982","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"c46a932257212f82e4a9974fbbc5de8878c8b383","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0b7571919e8ad51285deda56a1868fccf8c563d7","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"da9813f8dc0d388869c15413cf056012cfb69e1a","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"bafb3d5710824caa59a56017afb058fd2b4eac65","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b871ea208e36398b4d668db9a9a0b61c79415381","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"16378d8646ea3f4ac99c18f0296dd85b13f9d775","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"2b45fe09d5b591dca156b76dae99981f8d8e1c61","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"36f3c603d2a2ecddaa6d2675a89d76ad94968f72","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"3f3a3cd8bea2103dedd754f767aca5cb84d5f586","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"b443d6b16baf3ea250041342cc0361a42a412b7f","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"34088a15655704d12e9b1807b47b3f6a860c9eec","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"cb38ffe911023092a90a28f2ba8317a92b22cd0c","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"59b4c26a827ace5a54855881d199977103ff6f50","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"a2bc2601b7e0ae5caf1fc51a07390562d928620a","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"d8f59e94eafc669c49349561dc5bbea3915aecb7","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"613280d61b8ab9612014ec016ae3d3698d36fd1a","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1638778544000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1638778544000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"89cbcc8e087788ecec18b5fa58710afacdb7d080","modified":1638778544000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"8c0726fb8d9a497d2f900b0be2845efaa68e3d87","modified":1638778544000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1638778544000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"e0e7065124ef0d99f8322a47bc47838982e04ad0","modified":1638778544000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1638778544000},{"_id":"themes/butterfly/source/imgs/2.jpg","hash":"fc879aaa2259d35dee3b5bfb1a958e5496432868","modified":1638842515000},{"_id":"themes/butterfly/source/imgs/7.jpg","hash":"90ca7d272d9fcc1a749e83596ff19e27734bb158","modified":1638842515000},{"_id":"themes/butterfly/source/imgs/9.jpg","hash":"2a49a6e352e6e55640449bb846221036d2f41709","modified":1638842515000},{"_id":"themes/butterfly/source/imgs/8.jpg","hash":"ca40a6e6edd5c4f553c402a46326d61f644390fb","modified":1638842515000},{"_id":"themes/butterfly/source/imgs/6.jpg","hash":"53ed5752511adddc42904b249d794629ea454966","modified":1638842515000},{"_id":"themes/butterfly/source/imgs/5.jpg","hash":"4b9340a25769fa6041235ea75bc665770b29533a","modified":1638842515000},{"_id":"themes/butterfly/source/imgs/4.jpg","hash":"a6484636e812297df10f3de267568969019c7998","modified":1638842515000},{"_id":"themes/butterfly/source/imgs/1.jpg","hash":"fd5fcb8a8b4957ee6262bdc8b9f03ad62e9adb83","modified":1638842515000},{"_id":"public/about/index.html","hash":"29ec3d5c6d6569b82dc22b4ffffc458b008a6ce5","modified":1643077225663},{"_id":"public/categories/index.html","hash":"a7265a10ca59a1d7fe5d881e2722691fd9d3019f","modified":1643077225663},{"_id":"public/tags/index.html","hash":"1e27408320b2d79a53b7e4549e0008ac88f1eb48","modified":1643077225663},{"_id":"public/link/index.html","hash":"414ef6ca1da4d03b3f59b83f6873b8049c654d8e","modified":1643077225663},{"_id":"public/2021/12/06/hello-world/index.html","hash":"84eda5f40df77e3290f4ee7649d85c9e58e9b653","modified":1643077225663},{"_id":"public/2022/01/25/cs/index.html","hash":"12b5233ed2c6bd5e56d1c4da54c7b33a57774fa8","modified":1643077225663},{"_id":"public/2021/07/17/js-数据类型/index.html","hash":"80803675c88f951a32f1018c4e109315fcd5c348","modified":1643077225663},{"_id":"public/2021/07/17/js-深拷贝与浅拷贝/index.html","hash":"c335ef19bec64bad6c95b90facb7d7a807fd59f4","modified":1643077225663},{"_id":"public/2021/07/17/js-语法收集/index.html","hash":"748432d8ece47d726374c6b404f85eff901a8e91","modified":1643077225663},{"_id":"public/index.html","hash":"74e6b4324bae08810104229b3ab6ddd93d448414","modified":1643077225663},{"_id":"public/archives/index.html","hash":"d24e81a34259b708566baf977e9004435399ae3a","modified":1643077225663},{"_id":"public/archives/2021/index.html","hash":"204cf8913828b7f007a973af53e5016324181729","modified":1643077225663},{"_id":"public/archives/2021/07/index.html","hash":"588347d1381438ecf68c531397addd7083d95ee1","modified":1643077225663},{"_id":"public/archives/2022/index.html","hash":"095587ff8ec88534a2d6e194255a3ca98d30fb70","modified":1643077225663},{"_id":"public/archives/2021/12/index.html","hash":"847536d9d9677639915e51b2c4d157dc440cd8b1","modified":1643077225663},{"_id":"public/archives/2022/01/index.html","hash":"13fb9b61229a14276a0a60e9482763e51436aba9","modified":1643077225663},{"_id":"public/tags/js/index.html","hash":"6a50edf872cf827d988da64e16e9adbffba10cac","modified":1643077225663},{"_id":"public/imgs/vue3.png","hash":"a290de776571373f5e44b70551ed8ed1c3d28b6b","modified":1643077225663},{"_id":"public/imgs/vue5.png","hash":"d0cfaca2f2011b7e241cc416847faf5265201773","modified":1643077225663},{"_id":"public/imgs/vue4.png","hash":"fb4c95f3f67fc071a3a4da0c36bc2dc18a48635d","modified":1643077225663},{"_id":"public/imgs/vue7.png","hash":"8734e172c954b214aef5ee70139f179792243fa1","modified":1643077225663},{"_id":"public/imgs/vue8.png","hash":"2076a9458eaed0d74a34d37cae500625770aad9c","modified":1643077225663},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1643077225663},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1643077225663},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1643077225663},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1643077225663},{"_id":"public/imgs/3.jpg","hash":"663154c0e3f2ceb55222181ee1afbc198e61214f","modified":1643077225663},{"_id":"public/imgs/http.png","hash":"2ad1c0a60a61eda7217afe64ec6dd75296063569","modified":1643077225663},{"_id":"public/imgs/vue1.png","hash":"7cb485ff76211d8aefd1b8a9898ad9390b5e6932","modified":1643077225663},{"_id":"public/imgs/vue2.png","hash":"d236c2ae0b800ce70109435829ec6279d3c4ca03","modified":1643077225663},{"_id":"public/imgs/2.jpg","hash":"fc879aaa2259d35dee3b5bfb1a958e5496432868","modified":1643077225663},{"_id":"public/imgs/6.jpg","hash":"53ed5752511adddc42904b249d794629ea454966","modified":1643077225663},{"_id":"public/imgs/7.jpg","hash":"90ca7d272d9fcc1a749e83596ff19e27734bb158","modified":1643077225663},{"_id":"public/imgs/8.jpg","hash":"ca40a6e6edd5c4f553c402a46326d61f644390fb","modified":1643077225663},{"_id":"public/imgs/9.jpg","hash":"2a49a6e352e6e55640449bb846221036d2f41709","modified":1643077225663},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1643077225663},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1643077225663},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1643077225663},{"_id":"public/js/search/local-search.js","hash":"b1429e9f80ef6b9a77434819ffb87d90bdad25e8","modified":1643077225663},{"_id":"public/css/index.css","hash":"3e91aaa844d4aa3852d3aa86ddf1100c96b42f39","modified":1643077225663},{"_id":"public/js/main.js","hash":"b244f28124a46d7f1e8ef76ba6e925289691f93b","modified":1643077225663},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1643077225663},{"_id":"public/imgs/4.jpg","hash":"a6484636e812297df10f3de267568969019c7998","modified":1643077225663},{"_id":"public/imgs/5.jpg","hash":"4b9340a25769fa6041235ea75bc665770b29533a","modified":1643077225663},{"_id":"public/imgs/vue6.jpg","hash":"0815632419332ab4df6fc1816ebac18fc16582ab","modified":1643077225663},{"_id":"public/imgs/diaoyu1.jpeg","hash":"ccfa2ef2d75c6c3bbcf8966b616d0e7b7668d407","modified":1643077225663},{"_id":"public/imgs/1.jpg","hash":"fd5fcb8a8b4957ee6262bdc8b9f03ad62e9adb83","modified":1643077225663}],"Category":[],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"今天你学习了么？","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"技术了不得"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}],"Page":[{"title":"关于我","date":"2021-07-19T08:47:46.000Z","type":"about","_content":"\n\n\n学习永无止境、宜早不宜迟！\n\n\n![Image text](../imgs/diaoyu1.jpeg)\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2021-07-19 16:47:46\ntype: about\n---\n\n\n\n学习永无止境、宜早不宜迟！\n\n\n![Image text](../imgs/diaoyu1.jpeg)\n","updated":"2021-12-07T01:28:22.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckythr9en0000y4sw31avhlcv","content":"<p>学习永无止境、宜早不宜迟！</p>\n<p><img src=\"../imgs/diaoyu1.jpeg\" alt=\"Image text\"></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"今天你学习了么？","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"技术了不得"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"/imgs/6.jpg","excerpt":"","more":"<p>学习永无止境、宜早不宜迟！</p>\n<p><img src=\"../imgs/diaoyu1.jpeg\" alt=\"Image text\"></p>\n"},{"title":"友情链接","date":"2021-07-19T08:16:44.000Z","type":"link","_content":"\n","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2021-07-19 16:16:44\ntype: \"link\"\n---\n\n","updated":"2021-12-07T01:24:09.000Z","path":"link/index.html","comments":1,"layout":"page","_id":"ckythr9eq0002y4swh6r8agsv","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"今天你学习了么？","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"技术了不得"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"/imgs/4.jpg","excerpt":"","more":""},{"title":"分类","date":"2021-07-19T08:28:19.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-07-19 16:28:19\ntype: categories\n---\n","updated":"2021-12-07T01:24:09.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckythr9er0004y4sw08jg9nlm","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"今天你学习了么？","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"技术了不得"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"/imgs/5.jpg","excerpt":"","more":""},{"title":"tags","date":"2021-07-19T08:44:20.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-07-19 16:44:20\ntype: tags\n---\n\n","updated":"2021-12-07T01:24:09.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckythr9es0007y4swdl8z5r8h","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"今天你学习了么？","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"技术了不得"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"/imgs/5.jpg","excerpt":"","more":""}],"Post":[{"title":"cs","_content":"\n# ddd","source":"_posts/cs.md","raw":"---\ntitle: cs\n---\n\n# ddd","slug":"cs","published":1,"date":"2022-01-25T02:19:51.939Z","updated":"2022-01-25T02:20:12.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckythr9eo0001y4swbd7g69ze","content":"<h1 id=\"ddd\"><a href=\"#ddd\" class=\"headerlink\" title=\"ddd\"></a>ddd</h1>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"今天你学习了么？","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"技术了不得"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"/imgs/2.jpg","excerpt":"","more":"<h1 id=\"ddd\"><a href=\"#ddd\" class=\"headerlink\" title=\"ddd\"></a>ddd</h1>"},{"title":"js数据类型","date":"2021-07-16T16:00:00.000Z","type":"js","_content":"\n> 基本数据类型、引用数据类型\n\nECMAScript包括两个不同类型的值：基本数据类型和引用数据类型。\n基本数据类型指的是简单的数据段，引用数据类型指的是有多个值构成的对象。\n当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值。\nJavaScript目前有八种内置类型：\n  Number\n  String\n  Boolean\n  Null\n  Undefined\n  Object\n  Symbol\n  BigInt\n## 常见的基本数据类型\n\nNumber、String 、Boolean、Null和Undefined。基本数据类型是按值访问的，因为可以直接操作保存在变量中的实际值。示例：\n　　var a = 10;\n　　var b = a;\n　　b = 20;\n　　console.log(a); // 10值\n　　上面，b获取的是a值得一份拷贝，虽然，两个变量的值相等，但是两个变量保存了两个不同的基本数据类型值。\n　　b只是保存了a复制的一个副本。所以，b的改变，对a没有影响。\n\n\n## 引用类型数据\n  也就是对象类型Object type，比如：Object 、Array 、Function 、Data等。\n　　js的引用数据类型是保存在堆内存中的对象。\n　　与其他语言的不同是，你不可以直接访问堆内存空间中的位置和操作堆内存空间。只能操作对象在栈内存中的引用地址。\n　　所以，引用类型数据在栈内存中保存的实际上是对象在堆内存中的引用地址。通过这个引用地址可以快速查找到保存中堆内存中的对象。\n```js\nvar obj1 = new Object();\nvar obj2 = obj1;\nobj2.name = \"我有名字了\";\nconsole.log(obj1.name); // 我有名字了\n```\n　　说明这两个引用数据类型指向了同一个堆内存对象。obj1赋值给onj2，实际上这个堆内存对象在栈内存的引用地址复制了一份给了obj2，\n　　但是实际上他们共同指向了同一个堆内存对象。实际上改变的是堆内存对象。\n## 查看一个值的是数据类型\n>js中变量是没有数据类型的，只有值才有。变量可以持有任何数据类型的值。\n\ntypeof 用来查看变量的类型会返回一字符串：\n```js\ntypeof 1; // \"number\"\ntypeof '1'; // \"string\"\ntypeof undefined; // \"undefined\"\ntypeof true; // \"boolean\"\ntypeof {a:1}; // \"object\"\ntypeod Symbol(); //'symbo'\ntypeof null; // 'object'\n```\n>null 使用typeof 返回的类型是object，所以查看是不是null是需要用复合条件来检测\n> **typeof null === 'object'** 是因为js中的数据在底层是以二进制存储，比如null所有存储值都是0，但是底层的判断机制，只要前三位为0，就会判定为object\n\n```js\nvar a = null\n(!a && typeof a ===\"object\"); //true\n\nJSON.stringify(a) === 'null'\n```\n\n## 总结区别\n\n### 声明变量时不同的内存分配：　\n　　1）原始值：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。\n　　　　这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 – 栈中。这样存储便于迅速查寻变量的值。\n　　2）引用值：存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存地址。\n　　　  这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。\n　　　  地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。\n\n### 不同的内存分配机制也带来了不同的访问机制\n　　　\n　　1）在js中是不允许直接访问保存在堆内存中的对象的，所以在访问一个对象时，\n　　　　首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象中的值，这就是传说中的按引用访问。\n　　2）而原始类型的值则是可以直接访问到的。\n　　\n　　c 复制变量时的不同\n　　\n　　1）原始值：在将一个保存着原始值的变量复制给另一个变量时，会将原始值的副本赋值给新变量，此后这两个变量是完全独立的，他们只是拥有相同的value而已。\n　　2）引用值：在将一个保存着对象内存地址的变量复制给另一个变量时，会把这个内存地址赋值给新变量，\n　　　　也就是说这两个变量都指向了堆内存中的同一个对象，他们中任何一个作出的改变都会反映在另一个身上。\n　　　　（这里要理解的一点就是，复制对象时并不会在堆内存中新生成一个一模一样的对象，只是多了一个保存指向这个对象指针的变量罢了）。多了一个指针\n　\n### 参数传递的不同（把实参复制给形参的过程）\n\n　　首先我们应该明确一点：ECMAScript中所有函数的参数都是按值来传递的。\n　　但是为什么涉及到原始类型与引用类型的值时仍然有区别呢？还不就是因为内存分配时的差别。 　\n　　1）原始值：只是把变量里的值传递给参数，之后参数和这个变量互不影响。\n　　2）引用值：对象变量它里面的值是这个对象在堆内存中的内存地址，这一点你要时刻铭记在心！\n　　　　因此它传递的值也就是这个内存地址，这也就是为什么函数内部对这个参数的修改会体现在外部的原因了，因为它们都指向同一个对象。\n","source":"_posts/js-数据类型.md","raw":"---\ntitle: js数据类型\ndate: 2021-7-17\ntag: js\ntype: js\n---\n\n> 基本数据类型、引用数据类型\n\nECMAScript包括两个不同类型的值：基本数据类型和引用数据类型。\n基本数据类型指的是简单的数据段，引用数据类型指的是有多个值构成的对象。\n当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值。\nJavaScript目前有八种内置类型：\n  Number\n  String\n  Boolean\n  Null\n  Undefined\n  Object\n  Symbol\n  BigInt\n## 常见的基本数据类型\n\nNumber、String 、Boolean、Null和Undefined。基本数据类型是按值访问的，因为可以直接操作保存在变量中的实际值。示例：\n　　var a = 10;\n　　var b = a;\n　　b = 20;\n　　console.log(a); // 10值\n　　上面，b获取的是a值得一份拷贝，虽然，两个变量的值相等，但是两个变量保存了两个不同的基本数据类型值。\n　　b只是保存了a复制的一个副本。所以，b的改变，对a没有影响。\n\n\n## 引用类型数据\n  也就是对象类型Object type，比如：Object 、Array 、Function 、Data等。\n　　js的引用数据类型是保存在堆内存中的对象。\n　　与其他语言的不同是，你不可以直接访问堆内存空间中的位置和操作堆内存空间。只能操作对象在栈内存中的引用地址。\n　　所以，引用类型数据在栈内存中保存的实际上是对象在堆内存中的引用地址。通过这个引用地址可以快速查找到保存中堆内存中的对象。\n```js\nvar obj1 = new Object();\nvar obj2 = obj1;\nobj2.name = \"我有名字了\";\nconsole.log(obj1.name); // 我有名字了\n```\n　　说明这两个引用数据类型指向了同一个堆内存对象。obj1赋值给onj2，实际上这个堆内存对象在栈内存的引用地址复制了一份给了obj2，\n　　但是实际上他们共同指向了同一个堆内存对象。实际上改变的是堆内存对象。\n## 查看一个值的是数据类型\n>js中变量是没有数据类型的，只有值才有。变量可以持有任何数据类型的值。\n\ntypeof 用来查看变量的类型会返回一字符串：\n```js\ntypeof 1; // \"number\"\ntypeof '1'; // \"string\"\ntypeof undefined; // \"undefined\"\ntypeof true; // \"boolean\"\ntypeof {a:1}; // \"object\"\ntypeod Symbol(); //'symbo'\ntypeof null; // 'object'\n```\n>null 使用typeof 返回的类型是object，所以查看是不是null是需要用复合条件来检测\n> **typeof null === 'object'** 是因为js中的数据在底层是以二进制存储，比如null所有存储值都是0，但是底层的判断机制，只要前三位为0，就会判定为object\n\n```js\nvar a = null\n(!a && typeof a ===\"object\"); //true\n\nJSON.stringify(a) === 'null'\n```\n\n## 总结区别\n\n### 声明变量时不同的内存分配：　\n　　1）原始值：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。\n　　　　这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 – 栈中。这样存储便于迅速查寻变量的值。\n　　2）引用值：存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存地址。\n　　　  这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。\n　　　  地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。\n\n### 不同的内存分配机制也带来了不同的访问机制\n　　　\n　　1）在js中是不允许直接访问保存在堆内存中的对象的，所以在访问一个对象时，\n　　　　首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象中的值，这就是传说中的按引用访问。\n　　2）而原始类型的值则是可以直接访问到的。\n　　\n　　c 复制变量时的不同\n　　\n　　1）原始值：在将一个保存着原始值的变量复制给另一个变量时，会将原始值的副本赋值给新变量，此后这两个变量是完全独立的，他们只是拥有相同的value而已。\n　　2）引用值：在将一个保存着对象内存地址的变量复制给另一个变量时，会把这个内存地址赋值给新变量，\n　　　　也就是说这两个变量都指向了堆内存中的同一个对象，他们中任何一个作出的改变都会反映在另一个身上。\n　　　　（这里要理解的一点就是，复制对象时并不会在堆内存中新生成一个一模一样的对象，只是多了一个保存指向这个对象指针的变量罢了）。多了一个指针\n　\n### 参数传递的不同（把实参复制给形参的过程）\n\n　　首先我们应该明确一点：ECMAScript中所有函数的参数都是按值来传递的。\n　　但是为什么涉及到原始类型与引用类型的值时仍然有区别呢？还不就是因为内存分配时的差别。 　\n　　1）原始值：只是把变量里的值传递给参数，之后参数和这个变量互不影响。\n　　2）引用值：对象变量它里面的值是这个对象在堆内存中的内存地址，这一点你要时刻铭记在心！\n　　　　因此它传递的值也就是这个内存地址，这也就是为什么函数内部对这个参数的修改会体现在外部的原因了，因为它们都指向同一个对象。\n","slug":"js-数据类型","published":1,"updated":"2021-12-07T01:21:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckythr9eq0003y4swd2pxfz8h","content":"<blockquote>\n<p>基本数据类型、引用数据类型</p>\n</blockquote>\n<p>ECMAScript包括两个不同类型的值：基本数据类型和引用数据类型。<br>基本数据类型指的是简单的数据段，引用数据类型指的是有多个值构成的对象。<br>当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值。<br>JavaScript目前有八种内置类型：<br>  Number<br>  String<br>  Boolean<br>  Null<br>  Undefined<br>  Object<br>  Symbol<br>  BigInt</p>\n<h2 id=\"常见的基本数据类型\"><a href=\"#常见的基本数据类型\" class=\"headerlink\" title=\"常见的基本数据类型\"></a>常见的基本数据类型</h2><p>Number、String 、Boolean、Null和Undefined。基本数据类型是按值访问的，因为可以直接操作保存在变量中的实际值。示例：<br>　　var a = 10;<br>　　var b = a;<br>　　b = 20;<br>　　console.log(a); // 10值<br>　　上面，b获取的是a值得一份拷贝，虽然，两个变量的值相等，但是两个变量保存了两个不同的基本数据类型值。<br>　　b只是保存了a复制的一个副本。所以，b的改变，对a没有影响。</p>\n<h2 id=\"引用类型数据\"><a href=\"#引用类型数据\" class=\"headerlink\" title=\"引用类型数据\"></a>引用类型数据</h2><p>  也就是对象类型Object type，比如：Object 、Array 、Function 、Data等。<br>　　js的引用数据类型是保存在堆内存中的对象。<br>　　与其他语言的不同是，你不可以直接访问堆内存空间中的位置和操作堆内存空间。只能操作对象在栈内存中的引用地址。<br>　　所以，引用类型数据在栈内存中保存的实际上是对象在堆内存中的引用地址。通过这个引用地址可以快速查找到保存中堆内存中的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1;</span><br><span class=\"line\">obj2.name = <span class=\"string\">&quot;我有名字了&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.name); <span class=\"comment\">// 我有名字了</span></span><br></pre></td></tr></table></figure>\n<p>　　说明这两个引用数据类型指向了同一个堆内存对象。obj1赋值给onj2，实际上这个堆内存对象在栈内存的引用地址复制了一份给了obj2，<br>　　但是实际上他们共同指向了同一个堆内存对象。实际上改变的是堆内存对象。</p>\n<h2 id=\"查看一个值的是数据类型\"><a href=\"#查看一个值的是数据类型\" class=\"headerlink\" title=\"查看一个值的是数据类型\"></a>查看一个值的是数据类型</h2><blockquote>\n<p>js中变量是没有数据类型的，只有值才有。变量可以持有任何数据类型的值。</p>\n</blockquote>\n<p>typeof 用来查看变量的类型会返回一字符串：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span>; <span class=\"comment\">// &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;1&#x27;</span>; <span class=\"comment\">// &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>; <span class=\"comment\">// &quot;undefined&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>; <span class=\"comment\">// &quot;boolean&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;; <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\">typeod <span class=\"built_in\">Symbol</span>(); <span class=\"comment\">//&#x27;symbo&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>; <span class=\"comment\">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>null 使用typeof 返回的类型是object，所以查看是不是null是需要用复合条件来检测<br><strong>typeof null === ‘object’</strong> 是因为js中的数据在底层是以二进制存储，比如null所有存储值都是0，但是底层的判断机制，只要前三位为0，就会判定为object</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">null</span></span><br><span class=\"line\">(!a &amp;&amp; <span class=\"keyword\">typeof</span> a ===<span class=\"string\">&quot;object&quot;</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(a) === <span class=\"string\">&#x27;null&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结区别\"><a href=\"#总结区别\" class=\"headerlink\" title=\"总结区别\"></a>总结区别</h2><h3 id=\"声明变量时不同的内存分配：\"><a href=\"#声明变量时不同的内存分配：\" class=\"headerlink\" title=\"声明变量时不同的内存分配：\"></a>声明变量时不同的内存分配：</h3><p>　　1）原始值：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。<br>　　　　这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 – 栈中。这样存储便于迅速查寻变量的值。<br>　　2）引用值：存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存地址。<br>　　　  这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。<br>　　　  地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。</p>\n<h3 id=\"不同的内存分配机制也带来了不同的访问机制\"><a href=\"#不同的内存分配机制也带来了不同的访问机制\" class=\"headerlink\" title=\"不同的内存分配机制也带来了不同的访问机制\"></a>不同的内存分配机制也带来了不同的访问机制</h3><p>　　　<br>　　1）在js中是不允许直接访问保存在堆内存中的对象的，所以在访问一个对象时，<br>　　　　首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象中的值，这就是传说中的按引用访问。<br>　　2）而原始类型的值则是可以直接访问到的。<br>　　<br>　　c 复制变量时的不同<br>　　<br>　　1）原始值：在将一个保存着原始值的变量复制给另一个变量时，会将原始值的副本赋值给新变量，此后这两个变量是完全独立的，他们只是拥有相同的value而已。<br>　　2）引用值：在将一个保存着对象内存地址的变量复制给另一个变量时，会把这个内存地址赋值给新变量，<br>　　　　也就是说这两个变量都指向了堆内存中的同一个对象，他们中任何一个作出的改变都会反映在另一个身上。<br>　　　　（这里要理解的一点就是，复制对象时并不会在堆内存中新生成一个一模一样的对象，只是多了一个保存指向这个对象指针的变量罢了）。多了一个指针\n　</p>\n<h3 id=\"参数传递的不同（把实参复制给形参的过程）\"><a href=\"#参数传递的不同（把实参复制给形参的过程）\" class=\"headerlink\" title=\"参数传递的不同（把实参复制给形参的过程）\"></a>参数传递的不同（把实参复制给形参的过程）</h3><p>　　首先我们应该明确一点：ECMAScript中所有函数的参数都是按值来传递的。<br>　　但是为什么涉及到原始类型与引用类型的值时仍然有区别呢？还不就是因为内存分配时的差别。 　<br>　　1）原始值：只是把变量里的值传递给参数，之后参数和这个变量互不影响。<br>　　2）引用值：对象变量它里面的值是这个对象在堆内存中的内存地址，这一点你要时刻铭记在心！<br>　　　　因此它传递的值也就是这个内存地址，这也就是为什么函数内部对这个参数的修改会体现在外部的原因了，因为它们都指向同一个对象。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"今天你学习了么？","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"技术了不得"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"/imgs/6.jpg","excerpt":"","more":"<blockquote>\n<p>基本数据类型、引用数据类型</p>\n</blockquote>\n<p>ECMAScript包括两个不同类型的值：基本数据类型和引用数据类型。<br>基本数据类型指的是简单的数据段，引用数据类型指的是有多个值构成的对象。<br>当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值。<br>JavaScript目前有八种内置类型：<br>  Number<br>  String<br>  Boolean<br>  Null<br>  Undefined<br>  Object<br>  Symbol<br>  BigInt</p>\n<h2 id=\"常见的基本数据类型\"><a href=\"#常见的基本数据类型\" class=\"headerlink\" title=\"常见的基本数据类型\"></a>常见的基本数据类型</h2><p>Number、String 、Boolean、Null和Undefined。基本数据类型是按值访问的，因为可以直接操作保存在变量中的实际值。示例：<br>　　var a = 10;<br>　　var b = a;<br>　　b = 20;<br>　　console.log(a); // 10值<br>　　上面，b获取的是a值得一份拷贝，虽然，两个变量的值相等，但是两个变量保存了两个不同的基本数据类型值。<br>　　b只是保存了a复制的一个副本。所以，b的改变，对a没有影响。</p>\n<h2 id=\"引用类型数据\"><a href=\"#引用类型数据\" class=\"headerlink\" title=\"引用类型数据\"></a>引用类型数据</h2><p>  也就是对象类型Object type，比如：Object 、Array 、Function 、Data等。<br>　　js的引用数据类型是保存在堆内存中的对象。<br>　　与其他语言的不同是，你不可以直接访问堆内存空间中的位置和操作堆内存空间。只能操作对象在栈内存中的引用地址。<br>　　所以，引用类型数据在栈内存中保存的实际上是对象在堆内存中的引用地址。通过这个引用地址可以快速查找到保存中堆内存中的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1;</span><br><span class=\"line\">obj2.name = <span class=\"string\">&quot;我有名字了&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.name); <span class=\"comment\">// 我有名字了</span></span><br></pre></td></tr></table></figure>\n<p>　　说明这两个引用数据类型指向了同一个堆内存对象。obj1赋值给onj2，实际上这个堆内存对象在栈内存的引用地址复制了一份给了obj2，<br>　　但是实际上他们共同指向了同一个堆内存对象。实际上改变的是堆内存对象。</p>\n<h2 id=\"查看一个值的是数据类型\"><a href=\"#查看一个值的是数据类型\" class=\"headerlink\" title=\"查看一个值的是数据类型\"></a>查看一个值的是数据类型</h2><blockquote>\n<p>js中变量是没有数据类型的，只有值才有。变量可以持有任何数据类型的值。</p>\n</blockquote>\n<p>typeof 用来查看变量的类型会返回一字符串：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span>; <span class=\"comment\">// &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;1&#x27;</span>; <span class=\"comment\">// &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>; <span class=\"comment\">// &quot;undefined&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>; <span class=\"comment\">// &quot;boolean&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;; <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\">typeod <span class=\"built_in\">Symbol</span>(); <span class=\"comment\">//&#x27;symbo&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>; <span class=\"comment\">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>null 使用typeof 返回的类型是object，所以查看是不是null是需要用复合条件来检测<br><strong>typeof null === ‘object’</strong> 是因为js中的数据在底层是以二进制存储，比如null所有存储值都是0，但是底层的判断机制，只要前三位为0，就会判定为object</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">null</span></span><br><span class=\"line\">(!a &amp;&amp; <span class=\"keyword\">typeof</span> a ===<span class=\"string\">&quot;object&quot;</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(a) === <span class=\"string\">&#x27;null&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结区别\"><a href=\"#总结区别\" class=\"headerlink\" title=\"总结区别\"></a>总结区别</h2><h3 id=\"声明变量时不同的内存分配：\"><a href=\"#声明变量时不同的内存分配：\" class=\"headerlink\" title=\"声明变量时不同的内存分配：\"></a>声明变量时不同的内存分配：</h3><p>　　1）原始值：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。<br>　　　　这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 – 栈中。这样存储便于迅速查寻变量的值。<br>　　2）引用值：存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存地址。<br>　　　  这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。<br>　　　  地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。</p>\n<h3 id=\"不同的内存分配机制也带来了不同的访问机制\"><a href=\"#不同的内存分配机制也带来了不同的访问机制\" class=\"headerlink\" title=\"不同的内存分配机制也带来了不同的访问机制\"></a>不同的内存分配机制也带来了不同的访问机制</h3><p>　　　<br>　　1）在js中是不允许直接访问保存在堆内存中的对象的，所以在访问一个对象时，<br>　　　　首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象中的值，这就是传说中的按引用访问。<br>　　2）而原始类型的值则是可以直接访问到的。<br>　　<br>　　c 复制变量时的不同<br>　　<br>　　1）原始值：在将一个保存着原始值的变量复制给另一个变量时，会将原始值的副本赋值给新变量，此后这两个变量是完全独立的，他们只是拥有相同的value而已。<br>　　2）引用值：在将一个保存着对象内存地址的变量复制给另一个变量时，会把这个内存地址赋值给新变量，<br>　　　　也就是说这两个变量都指向了堆内存中的同一个对象，他们中任何一个作出的改变都会反映在另一个身上。<br>　　　　（这里要理解的一点就是，复制对象时并不会在堆内存中新生成一个一模一样的对象，只是多了一个保存指向这个对象指针的变量罢了）。多了一个指针\n　</p>\n<h3 id=\"参数传递的不同（把实参复制给形参的过程）\"><a href=\"#参数传递的不同（把实参复制给形参的过程）\" class=\"headerlink\" title=\"参数传递的不同（把实参复制给形参的过程）\"></a>参数传递的不同（把实参复制给形参的过程）</h3><p>　　首先我们应该明确一点：ECMAScript中所有函数的参数都是按值来传递的。<br>　　但是为什么涉及到原始类型与引用类型的值时仍然有区别呢？还不就是因为内存分配时的差别。 　<br>　　1）原始值：只是把变量里的值传递给参数，之后参数和这个变量互不影响。<br>　　2）引用值：对象变量它里面的值是这个对象在堆内存中的内存地址，这一点你要时刻铭记在心！<br>　　　　因此它传递的值也就是这个内存地址，这也就是为什么函数内部对这个参数的修改会体现在外部的原因了，因为它们都指向同一个对象。</p>\n"},{"title":"浅拷贝与深拷贝","date":"2021-07-16T16:00:00.000Z","type":"js","_content":"\n## 浅拷贝与深拷贝 (深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的)\n\n**浅拷贝只复制指向某个对象的指针而不复制对象本身，新旧对象还是共享同一块内存。**\n**但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。**\n\n\n## 赋值和浅拷贝的区别\n\n+ 当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。\n+ 浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即：默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。\n  \n\n## 浅拷贝的实现方式\n\n```js\n var obj1 = {\n    'name' : 'zhangsan',\n    'age' :  '18',\n    'language' : [1,[2,3],[4,5]],  //Array\n};\n var obj3 = shallowCopy(obj1);\n obj3.name = \"lisi\";\n obj3.language[1] = [\"二\",\"三\"];\n function shallowCopy(src) {\n    var dst = {};\n    for (var prop in src) {\n        if (src.hasOwnProperty(prop)) {\n            dst[prop] = src[prop];\n        }\n    }\n    return dst;\n}\nconsole.log('obj1',obj1)\nconsole.log('obj3',obj3)\n```\n\n**.Object.assign()**\nObject.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign()进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。\n\n```js\nvar obj = { a: {a: \"kobe\", b: 39} };\nvar initalObj = Object.assign({}, obj);\ninitalObj.a.a = \"wade\";\nconsole.log(obj.a.a); //wade\n```\n  *注意：当object只有一层的时候，是深拷贝*\n\n**Array.prototype.concat()**\n```js\nlet arr = [1, 3, {\n    username: 'kobe'\n    }];\nlet arr2=arr.concat();\narr2[2].username = 'wade';\nconsole.log(arr);\n```\n\n## 深拷贝的实现方式\n\n**1.JSON.parse(JSON.stringify())**\n```js\nlet arr = [1, 3, {\n  username: ' kobe'\n}];\nlet arr4 = JSON.parse(JSON.stringify(arr));\narr4[2].username = 'duncan';\nconsole.log(arr, arr4)\n```\n*原理： 用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，实现深拷贝。*\n**这种方法虽然可以实现数组或对象深拷贝,但不能处理函数**\n\n**2.手写递归方法**\n```js\n    //定义检测数据类型的功能函数\nfunction checkedType(target) {\n  return Object.prototype.toString.call(target).slice(8, -1)\n}\n//实现深度克隆---对象/数组\nfunction clone(target) {\n  //判断拷贝的数据类型\n  //初始化变量result 成为最终克隆的数据\n  let result, targetType = checkedType(target)\n  if (targetType === 'object') {\n    result = {}\n  } else if (targetType === 'Array') {\n    result = []\n  } else {\n    return target\n  }\n  //遍历目标数据\n  for (let i in target) {\n    //获取遍历数据结构的每一项值。\n    let value = target[i]\n    //判断目标结构里的每一值是否存在对象/数组\n    if (checkedType(value) === 'Object' ||\n      checkedType(value) === 'Array') { //对象/数组里嵌套了对象/数组\n      //继续遍历获取到value值\n      result[i] = clone(value)\n    } else { //获取到value值是基本的数据类型或者是函数。\n      result[i] = value;\n    }\n  }\n  return result\n}\n```\n\n**3.函数库lodash**\n该函数库也有提供_.cloneDeep用来做 Deep Copy\n```js\nvar _ = require('lodash');\nvar obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n};\nvar obj2 = _.cloneDeep(obj1);\nconsole.log(obj1.b.f === obj2.b.f);\n// false\n```\n\n ","source":"_posts/js-深拷贝与浅拷贝.md","raw":"---\ntitle: 浅拷贝与深拷贝\ndate: 2021-7-17\ntag: js\ntype: js\n---\n\n## 浅拷贝与深拷贝 (深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的)\n\n**浅拷贝只复制指向某个对象的指针而不复制对象本身，新旧对象还是共享同一块内存。**\n**但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。**\n\n\n## 赋值和浅拷贝的区别\n\n+ 当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。\n+ 浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即：默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。\n  \n\n## 浅拷贝的实现方式\n\n```js\n var obj1 = {\n    'name' : 'zhangsan',\n    'age' :  '18',\n    'language' : [1,[2,3],[4,5]],  //Array\n};\n var obj3 = shallowCopy(obj1);\n obj3.name = \"lisi\";\n obj3.language[1] = [\"二\",\"三\"];\n function shallowCopy(src) {\n    var dst = {};\n    for (var prop in src) {\n        if (src.hasOwnProperty(prop)) {\n            dst[prop] = src[prop];\n        }\n    }\n    return dst;\n}\nconsole.log('obj1',obj1)\nconsole.log('obj3',obj3)\n```\n\n**.Object.assign()**\nObject.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign()进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。\n\n```js\nvar obj = { a: {a: \"kobe\", b: 39} };\nvar initalObj = Object.assign({}, obj);\ninitalObj.a.a = \"wade\";\nconsole.log(obj.a.a); //wade\n```\n  *注意：当object只有一层的时候，是深拷贝*\n\n**Array.prototype.concat()**\n```js\nlet arr = [1, 3, {\n    username: 'kobe'\n    }];\nlet arr2=arr.concat();\narr2[2].username = 'wade';\nconsole.log(arr);\n```\n\n## 深拷贝的实现方式\n\n**1.JSON.parse(JSON.stringify())**\n```js\nlet arr = [1, 3, {\n  username: ' kobe'\n}];\nlet arr4 = JSON.parse(JSON.stringify(arr));\narr4[2].username = 'duncan';\nconsole.log(arr, arr4)\n```\n*原理： 用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，实现深拷贝。*\n**这种方法虽然可以实现数组或对象深拷贝,但不能处理函数**\n\n**2.手写递归方法**\n```js\n    //定义检测数据类型的功能函数\nfunction checkedType(target) {\n  return Object.prototype.toString.call(target).slice(8, -1)\n}\n//实现深度克隆---对象/数组\nfunction clone(target) {\n  //判断拷贝的数据类型\n  //初始化变量result 成为最终克隆的数据\n  let result, targetType = checkedType(target)\n  if (targetType === 'object') {\n    result = {}\n  } else if (targetType === 'Array') {\n    result = []\n  } else {\n    return target\n  }\n  //遍历目标数据\n  for (let i in target) {\n    //获取遍历数据结构的每一项值。\n    let value = target[i]\n    //判断目标结构里的每一值是否存在对象/数组\n    if (checkedType(value) === 'Object' ||\n      checkedType(value) === 'Array') { //对象/数组里嵌套了对象/数组\n      //继续遍历获取到value值\n      result[i] = clone(value)\n    } else { //获取到value值是基本的数据类型或者是函数。\n      result[i] = value;\n    }\n  }\n  return result\n}\n```\n\n**3.函数库lodash**\n该函数库也有提供_.cloneDeep用来做 Deep Copy\n```js\nvar _ = require('lodash');\nvar obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n};\nvar obj2 = _.cloneDeep(obj1);\nconsole.log(obj1.b.f === obj2.b.f);\n// false\n```\n\n ","slug":"js-深拷贝与浅拷贝","published":1,"updated":"2022-01-25T02:04:25.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckythr9er0005y4swh6bc7tz9","content":"<h2 id=\"浅拷贝与深拷贝-深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的\"><a href=\"#浅拷贝与深拷贝-深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的\" class=\"headerlink\" title=\"浅拷贝与深拷贝 (深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的)\"></a>浅拷贝与深拷贝 (深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的)</h2><p><strong>浅拷贝只复制指向某个对象的指针而不复制对象本身，新旧对象还是共享同一块内存。</strong><br><strong>但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</strong></p>\n<h2 id=\"赋值和浅拷贝的区别\"><a href=\"#赋值和浅拷贝的区别\" class=\"headerlink\" title=\"赋值和浅拷贝的区别\"></a>赋值和浅拷贝的区别</h2><ul>\n<li>当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。</li>\n<li>浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即：默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。</li>\n</ul>\n<h2 id=\"浅拷贝的实现方式\"><a href=\"#浅拷贝的实现方式\" class=\"headerlink\" title=\"浅拷贝的实现方式\"></a>浅拷贝的实现方式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span> : <span class=\"string\">&#x27;zhangsan&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;age&#x27;</span> :  <span class=\"string\">&#x27;18&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;language&#x27;</span> : [<span class=\"number\">1</span>,[<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>]],  <span class=\"comment\">//Array</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> obj3 = shallowCopy(obj1);</span><br><span class=\"line\"> obj3.name = <span class=\"string\">&quot;lisi&quot;</span>;</span><br><span class=\"line\"> obj3.language[<span class=\"number\">1</span>] = [<span class=\"string\">&quot;二&quot;</span>,<span class=\"string\">&quot;三&quot;</span>];</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopy</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dst = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> src) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (src.hasOwnProperty(prop)) &#123;</span><br><span class=\"line\">            dst[prop] = src[prop];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dst;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;obj1&#x27;</span>,obj1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;obj3&#x27;</span>,obj3)</span><br></pre></td></tr></table></figure>\n\n<p><strong>.Object.assign()</strong><br>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign()进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: &#123;<span class=\"attr\">a</span>: <span class=\"string\">&quot;kobe&quot;</span>, <span class=\"attr\">b</span>: <span class=\"number\">39</span>&#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> initalObj = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj);</span><br><span class=\"line\">initalObj.a.a = <span class=\"string\">&quot;wade&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.a.a); <span class=\"comment\">//wade</span></span><br></pre></td></tr></table></figure>\n<p>  <em>注意：当object只有一层的时候，是深拷贝</em></p>\n<p><strong>Array.prototype.concat()</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">&#x27;kobe&#x27;</span></span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2=arr.concat();</span><br><span class=\"line\">arr2[<span class=\"number\">2</span>].username = <span class=\"string\">&#x27;wade&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"深拷贝的实现方式\"><a href=\"#深拷贝的实现方式\" class=\"headerlink\" title=\"深拷贝的实现方式\"></a>深拷贝的实现方式</h2><p><strong>1.JSON.parse(JSON.stringify())</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">username</span>: <span class=\"string\">&#x27; kobe&#x27;</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr));</span><br><span class=\"line\">arr4[<span class=\"number\">2</span>].username = <span class=\"string\">&#x27;duncan&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, arr4)</span><br></pre></td></tr></table></figure>\n<p><em>原理： 用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，实现深拷贝。</em><br><strong>这种方法虽然可以实现数组或对象深拷贝,但不能处理函数</strong></p>\n<p><strong>2.手写递归方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//定义检测数据类型的功能函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkedType</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(target).slice(<span class=\"number\">8</span>, -<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实现深度克隆---对象/数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//判断拷贝的数据类型</span></span><br><span class=\"line\">  <span class=\"comment\">//初始化变量result 成为最终克隆的数据</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result, targetType = checkedType(target)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (targetType === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">    result = &#123;&#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetType === <span class=\"string\">&#x27;Array&#x27;</span>) &#123;</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//遍历目标数据</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取遍历数据结构的每一项值。</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = target[i]</span><br><span class=\"line\">    <span class=\"comment\">//判断目标结构里的每一值是否存在对象/数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (checkedType(value) === <span class=\"string\">&#x27;Object&#x27;</span> ||</span><br><span class=\"line\">      checkedType(value) === <span class=\"string\">&#x27;Array&#x27;</span>) &#123; <span class=\"comment\">//对象/数组里嵌套了对象/数组</span></span><br><span class=\"line\">      <span class=\"comment\">//继续遍历获取到value值</span></span><br><span class=\"line\">      result[i] = clone(value)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//获取到value值是基本的数据类型或者是函数。</span></span><br><span class=\"line\">      result[i] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.函数库lodash</strong><br>该函数库也有提供_.cloneDeep用来做 Deep Copy</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123; <span class=\"attr\">f</span>: &#123; <span class=\"attr\">g</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = _.cloneDeep(obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.b.f === obj2.b.f);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"今天你学习了么？","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"技术了不得"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"/imgs/4.jpg","excerpt":"","more":"<h2 id=\"浅拷贝与深拷贝-深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的\"><a href=\"#浅拷贝与深拷贝-深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的\" class=\"headerlink\" title=\"浅拷贝与深拷贝 (深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的)\"></a>浅拷贝与深拷贝 (深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的)</h2><p><strong>浅拷贝只复制指向某个对象的指针而不复制对象本身，新旧对象还是共享同一块内存。</strong><br><strong>但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</strong></p>\n<h2 id=\"赋值和浅拷贝的区别\"><a href=\"#赋值和浅拷贝的区别\" class=\"headerlink\" title=\"赋值和浅拷贝的区别\"></a>赋值和浅拷贝的区别</h2><ul>\n<li>当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。</li>\n<li>浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即：默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。</li>\n</ul>\n<h2 id=\"浅拷贝的实现方式\"><a href=\"#浅拷贝的实现方式\" class=\"headerlink\" title=\"浅拷贝的实现方式\"></a>浅拷贝的实现方式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span> : <span class=\"string\">&#x27;zhangsan&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;age&#x27;</span> :  <span class=\"string\">&#x27;18&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;language&#x27;</span> : [<span class=\"number\">1</span>,[<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>]],  <span class=\"comment\">//Array</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> obj3 = shallowCopy(obj1);</span><br><span class=\"line\"> obj3.name = <span class=\"string\">&quot;lisi&quot;</span>;</span><br><span class=\"line\"> obj3.language[<span class=\"number\">1</span>] = [<span class=\"string\">&quot;二&quot;</span>,<span class=\"string\">&quot;三&quot;</span>];</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopy</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dst = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> src) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (src.hasOwnProperty(prop)) &#123;</span><br><span class=\"line\">            dst[prop] = src[prop];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dst;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;obj1&#x27;</span>,obj1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;obj3&#x27;</span>,obj3)</span><br></pre></td></tr></table></figure>\n\n<p><strong>.Object.assign()</strong><br>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign()进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: &#123;<span class=\"attr\">a</span>: <span class=\"string\">&quot;kobe&quot;</span>, <span class=\"attr\">b</span>: <span class=\"number\">39</span>&#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> initalObj = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj);</span><br><span class=\"line\">initalObj.a.a = <span class=\"string\">&quot;wade&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.a.a); <span class=\"comment\">//wade</span></span><br></pre></td></tr></table></figure>\n<p>  <em>注意：当object只有一层的时候，是深拷贝</em></p>\n<p><strong>Array.prototype.concat()</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">&#x27;kobe&#x27;</span></span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2=arr.concat();</span><br><span class=\"line\">arr2[<span class=\"number\">2</span>].username = <span class=\"string\">&#x27;wade&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"深拷贝的实现方式\"><a href=\"#深拷贝的实现方式\" class=\"headerlink\" title=\"深拷贝的实现方式\"></a>深拷贝的实现方式</h2><p><strong>1.JSON.parse(JSON.stringify())</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">username</span>: <span class=\"string\">&#x27; kobe&#x27;</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr));</span><br><span class=\"line\">arr4[<span class=\"number\">2</span>].username = <span class=\"string\">&#x27;duncan&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, arr4)</span><br></pre></td></tr></table></figure>\n<p><em>原理： 用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，实现深拷贝。</em><br><strong>这种方法虽然可以实现数组或对象深拷贝,但不能处理函数</strong></p>\n<p><strong>2.手写递归方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//定义检测数据类型的功能函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkedType</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(target).slice(<span class=\"number\">8</span>, -<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实现深度克隆---对象/数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//判断拷贝的数据类型</span></span><br><span class=\"line\">  <span class=\"comment\">//初始化变量result 成为最终克隆的数据</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result, targetType = checkedType(target)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (targetType === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">    result = &#123;&#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetType === <span class=\"string\">&#x27;Array&#x27;</span>) &#123;</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//遍历目标数据</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取遍历数据结构的每一项值。</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = target[i]</span><br><span class=\"line\">    <span class=\"comment\">//判断目标结构里的每一值是否存在对象/数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (checkedType(value) === <span class=\"string\">&#x27;Object&#x27;</span> ||</span><br><span class=\"line\">      checkedType(value) === <span class=\"string\">&#x27;Array&#x27;</span>) &#123; <span class=\"comment\">//对象/数组里嵌套了对象/数组</span></span><br><span class=\"line\">      <span class=\"comment\">//继续遍历获取到value值</span></span><br><span class=\"line\">      result[i] = clone(value)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//获取到value值是基本的数据类型或者是函数。</span></span><br><span class=\"line\">      result[i] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.函数库lodash</strong><br>该函数库也有提供_.cloneDeep用来做 Deep Copy</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123; <span class=\"attr\">f</span>: &#123; <span class=\"attr\">g</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = _.cloneDeep(obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.b.f === obj2.b.f);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-12-06T08:09:56.000Z","updated":"2021-12-06T08:09:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckythr9es0008y4swcq6pdu96","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"今天你学习了么？","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"技术了不得"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"/imgs/1.jpg","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"js语法收集","date":"2021-07-16T16:00:00.000Z","_content":"# 判断执行\n```js\nif(el){\n query(el)\n}\nel && query(el)\n\nif(el){\n el = query(el)\n}\nel = el && query(el);\nif(!el) return\nel = query(el)\n\n// 是否存执行方法  或者读取数据\nlet object = {\n  name:'张三',\n  hobby:{\n    a:'钓鱼',\n    b:'滑板'\n  }\n}\n// 意思是如果object存在就取hobby(否则终止),如果hobby存在就取a(否则终止)。当有一个不存在的时候就取|| 后面的默认值\nlet a = object?.hobby?.a || '暂无数据'\n\n// || 与 ??\n// ?? 只会过 null 与 undefined\n// || 当数据为 '', 0, null, undefined, false 都会走默认值\naxios.get('/...').then(res => {\n  if(res.code === 200) {\n    this.data = res.data || {}\n  }\n})\naxios.get('/...').then(res => {\n  if(res.code === 200) {\n    this.data = res.data ?? {}\n  }\n})\n\n```\n# 少用三目运算符\n这个我个人理解是如果判断的东西非常简单，就是用三目(判断有两种情况，对应两种值、或者两个方法)\n如果情况来判断比较多 就使用if（判断的东西有三种情况，对应三种）\n如果更多的话就使用switch\n```js\nlet whether = true\nwhether ？ this.yes() : this.no()\n\nlet index = 0\nif (index < 0) {\n  this.beLessThan()\n} else if(index === 0){\n  this.equal()\n} else {\n  this.moreThanThe()\n}\n\nswitch (index) {\n  case 0:\n    // ...\n    break;\n  case 1:\n    // ...\n    break;\n  case 2:\n    // ...\n    break;\n  case 3:\n    // ...\n    break;\n  case 4:\n    // ...\n    break;\n  default:\n    // ...\n    break;\n}\n```\n\n# 传参使用默认值\n```js\nfunction logicProcessingFunction( name = 'defaults' ) {\n    // ...\n}\n\n```\n# 使用 Object.assign 设置默认属性\n```js\nconst menuConfig = {\n  title: 'Order',\n  body: 'Send'\n};\nfunction createMenu(config) {\n  config = Object.assign({\n    title: 'Foo',\n    body: 'Bar'\n  }, config);\n  // config : {title: \"Order\", body: \"Bar\"}\n  // ...\n}\ncreateMenu(menuConfig);\n```\n# 函数参数( 最好 2 个或更少 )，如果参数超过两个，建议使用 ES6 的解构语法，不用考虑参数的顺序。\n```js\nfunction logicProcessingFunction({name, age, gender, height, weight, hobby = '钓鱼'}) {\n  console.log(name, age, gender, height, weight, hobby)\n}\nlet data = {\n  name: 'zhangSan', age:3 , gender: '男', height:180, weight: 80\n}\nlogicProcessingFunction(data)\n```\n# 每个方法只做一件事情\n在处理一个需求的时候，将需求拆分细化：\n例如，第一步、第二步、第三步\n或者，第一种情况、第二种情况、第三种情况\n这样有利于维护,处理事件的逻辑不会混乱\n```js\nvar getUserInfo = function(){\n    ajax( 'http:// xxx.com/userInfo', function( data ){\n        console.log( 'userId: ' + data.userId );\n        console.log( 'userName: ' + data.userName );\n        console.log( 'nickName: ' + data.nickName );\n    });\n};\n\n//改成：\nvar getUserInfo = function(){\n    ajax( 'http:// xxx.com/userInfo', function( data ){\n        printDetails( data );\n    });\n};\n\nvar printDetails = function( data ){\n    console.log( 'userId: ' + data.userId );\n    console.log( 'userName: ' + data.userName );\n    console.log( 'nickName: ' + data.nickName );\n};\n```\n# 把条件分支语句提炼成函数\n```js\nvar getPrice = function( price ){\n    var date = new Date();\n    if ( date.getMonth() >= 6 && date.getMonth() <= 9 ){    // 夏天\n        return price * 0.8;\n    }\n    return price;\n};\n\n// 改成\nvar isSummer = function(){\n    var date = new Date();\n    return date.getMonth() >= 6 && date.getMonth() <= 9;\n};\n\nvar getPrice = function( price ){\n    if ( isSummer() ){    // 夏天\n        return price * 0.8;\n    }\n    return price;\n};\n```\n# 类\n```js\n// bad\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n}\n \nPerson.prototype.addAge = function(){\n    this.age++;\n};\n \nPerson.prototype.setName = function(name){\n    this.name = name;\n};\n// good\nclass Person{\n    constructor(name, age){\n        this.name = name;\n        this.age = age;\n    }\n    addAge(){\n        this.age++;\n    }\n    setName(name){\n        this.name = name;\n    }\n}\n```\n# 尽量不要写全局方法\n```js\n// Bad:\nArray.prototype.diff = function diff(comparisonArray) {\n  const hash = new Set(comparisonArray);\n  return this.filter(elem => !hash.has(elem));\n};\n// Good:\nclass SuperArray extends Array {\n  diff(comparisonArray) {\n    const hash = new Set(comparisonArray);\n    return this.filter(elem => !hash.has(elem));        \n  }\n}\n```\n","source":"_posts/js-语法收集.md","raw":"---\ntitle: js语法收集\ntag: js\ndate: 2021-7-17\n---\n# 判断执行\n```js\nif(el){\n query(el)\n}\nel && query(el)\n\nif(el){\n el = query(el)\n}\nel = el && query(el);\nif(!el) return\nel = query(el)\n\n// 是否存执行方法  或者读取数据\nlet object = {\n  name:'张三',\n  hobby:{\n    a:'钓鱼',\n    b:'滑板'\n  }\n}\n// 意思是如果object存在就取hobby(否则终止),如果hobby存在就取a(否则终止)。当有一个不存在的时候就取|| 后面的默认值\nlet a = object?.hobby?.a || '暂无数据'\n\n// || 与 ??\n// ?? 只会过 null 与 undefined\n// || 当数据为 '', 0, null, undefined, false 都会走默认值\naxios.get('/...').then(res => {\n  if(res.code === 200) {\n    this.data = res.data || {}\n  }\n})\naxios.get('/...').then(res => {\n  if(res.code === 200) {\n    this.data = res.data ?? {}\n  }\n})\n\n```\n# 少用三目运算符\n这个我个人理解是如果判断的东西非常简单，就是用三目(判断有两种情况，对应两种值、或者两个方法)\n如果情况来判断比较多 就使用if（判断的东西有三种情况，对应三种）\n如果更多的话就使用switch\n```js\nlet whether = true\nwhether ？ this.yes() : this.no()\n\nlet index = 0\nif (index < 0) {\n  this.beLessThan()\n} else if(index === 0){\n  this.equal()\n} else {\n  this.moreThanThe()\n}\n\nswitch (index) {\n  case 0:\n    // ...\n    break;\n  case 1:\n    // ...\n    break;\n  case 2:\n    // ...\n    break;\n  case 3:\n    // ...\n    break;\n  case 4:\n    // ...\n    break;\n  default:\n    // ...\n    break;\n}\n```\n\n# 传参使用默认值\n```js\nfunction logicProcessingFunction( name = 'defaults' ) {\n    // ...\n}\n\n```\n# 使用 Object.assign 设置默认属性\n```js\nconst menuConfig = {\n  title: 'Order',\n  body: 'Send'\n};\nfunction createMenu(config) {\n  config = Object.assign({\n    title: 'Foo',\n    body: 'Bar'\n  }, config);\n  // config : {title: \"Order\", body: \"Bar\"}\n  // ...\n}\ncreateMenu(menuConfig);\n```\n# 函数参数( 最好 2 个或更少 )，如果参数超过两个，建议使用 ES6 的解构语法，不用考虑参数的顺序。\n```js\nfunction logicProcessingFunction({name, age, gender, height, weight, hobby = '钓鱼'}) {\n  console.log(name, age, gender, height, weight, hobby)\n}\nlet data = {\n  name: 'zhangSan', age:3 , gender: '男', height:180, weight: 80\n}\nlogicProcessingFunction(data)\n```\n# 每个方法只做一件事情\n在处理一个需求的时候，将需求拆分细化：\n例如，第一步、第二步、第三步\n或者，第一种情况、第二种情况、第三种情况\n这样有利于维护,处理事件的逻辑不会混乱\n```js\nvar getUserInfo = function(){\n    ajax( 'http:// xxx.com/userInfo', function( data ){\n        console.log( 'userId: ' + data.userId );\n        console.log( 'userName: ' + data.userName );\n        console.log( 'nickName: ' + data.nickName );\n    });\n};\n\n//改成：\nvar getUserInfo = function(){\n    ajax( 'http:// xxx.com/userInfo', function( data ){\n        printDetails( data );\n    });\n};\n\nvar printDetails = function( data ){\n    console.log( 'userId: ' + data.userId );\n    console.log( 'userName: ' + data.userName );\n    console.log( 'nickName: ' + data.nickName );\n};\n```\n# 把条件分支语句提炼成函数\n```js\nvar getPrice = function( price ){\n    var date = new Date();\n    if ( date.getMonth() >= 6 && date.getMonth() <= 9 ){    // 夏天\n        return price * 0.8;\n    }\n    return price;\n};\n\n// 改成\nvar isSummer = function(){\n    var date = new Date();\n    return date.getMonth() >= 6 && date.getMonth() <= 9;\n};\n\nvar getPrice = function( price ){\n    if ( isSummer() ){    // 夏天\n        return price * 0.8;\n    }\n    return price;\n};\n```\n# 类\n```js\n// bad\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n}\n \nPerson.prototype.addAge = function(){\n    this.age++;\n};\n \nPerson.prototype.setName = function(name){\n    this.name = name;\n};\n// good\nclass Person{\n    constructor(name, age){\n        this.name = name;\n        this.age = age;\n    }\n    addAge(){\n        this.age++;\n    }\n    setName(name){\n        this.name = name;\n    }\n}\n```\n# 尽量不要写全局方法\n```js\n// Bad:\nArray.prototype.diff = function diff(comparisonArray) {\n  const hash = new Set(comparisonArray);\n  return this.filter(elem => !hash.has(elem));\n};\n// Good:\nclass SuperArray extends Array {\n  diff(comparisonArray) {\n    const hash = new Set(comparisonArray);\n    return this.filter(elem => !hash.has(elem));        \n  }\n}\n```\n","slug":"js-语法收集","published":1,"updated":"2021-12-07T01:21:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckythr9ez000cy4sw342c74kg","content":"<h1 id=\"判断执行\"><a href=\"#判断执行\" class=\"headerlink\" title=\"判断执行\"></a>判断执行</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(el)&#123;</span><br><span class=\"line\"> query(el)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">el &amp;&amp; query(el)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(el)&#123;</span><br><span class=\"line\"> el = query(el)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">el = el &amp;&amp; query(el);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!el) <span class=\"keyword\">return</span></span><br><span class=\"line\">el = query(el)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否存执行方法  或者读取数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> object = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">hobby</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"string\">&#x27;钓鱼&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>:<span class=\"string\">&#x27;滑板&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 意思是如果object存在就取hobby(否则终止),如果hobby存在就取a(否则终止)。当有一个不存在的时候就取|| 后面的默认值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = object?.hobby?.a || <span class=\"string\">&#x27;暂无数据&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// || 与 ??</span></span><br><span class=\"line\"><span class=\"comment\">// ?? 只会过 null 与 undefined</span></span><br><span class=\"line\"><span class=\"comment\">// || 当数据为 &#x27;&#x27;, 0, null, undefined, false 都会走默认值</span></span><br><span class=\"line\">axios.get(<span class=\"string\">&#x27;/...&#x27;</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(res.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.data = res.data || &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">axios.get(<span class=\"string\">&#x27;/...&#x27;</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(res.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.data = res.data ?? &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"少用三目运算符\"><a href=\"#少用三目运算符\" class=\"headerlink\" title=\"少用三目运算符\"></a>少用三目运算符</h1><p>这个我个人理解是如果判断的东西非常简单，就是用三目(判断有两种情况，对应两种值、或者两个方法)<br>如果情况来判断比较多 就使用if（判断的东西有三种情况，对应三种）<br>如果更多的话就使用switch</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> whether = <span class=\"literal\">true</span></span><br><span class=\"line\">whether ？ <span class=\"built_in\">this</span>.yes() : <span class=\"built_in\">this</span>.no()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.beLessThan()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(index === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.equal()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.moreThanThe()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (index) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"传参使用默认值\"><a href=\"#传参使用默认值\" class=\"headerlink\" title=\"传参使用默认值\"></a>传参使用默认值</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logicProcessingFunction</span>(<span class=\"params\"> name = <span class=\"string\">&#x27;defaults&#x27;</span> </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用-Object-assign-设置默认属性\"><a href=\"#使用-Object-assign-设置默认属性\" class=\"headerlink\" title=\"使用 Object.assign 设置默认属性\"></a>使用 Object.assign 设置默认属性</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> menuConfig = &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Order&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">body</span>: <span class=\"string\">&#x27;Send&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config = <span class=\"built_in\">Object</span>.assign(&#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: <span class=\"string\">&#x27;Bar&#x27;</span></span><br><span class=\"line\">  &#125;, config);</span><br><span class=\"line\">  <span class=\"comment\">// config : &#123;title: &quot;Order&quot;, body: &quot;Bar&quot;&#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">createMenu(menuConfig);</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数参数-最好-2-个或更少-，如果参数超过两个，建议使用-ES6-的解构语法，不用考虑参数的顺序。\"><a href=\"#函数参数-最好-2-个或更少-，如果参数超过两个，建议使用-ES6-的解构语法，不用考虑参数的顺序。\" class=\"headerlink\" title=\"函数参数( 最好 2 个或更少 )，如果参数超过两个，建议使用 ES6 的解构语法，不用考虑参数的顺序。\"></a>函数参数( 最好 2 个或更少 )，如果参数超过两个，建议使用 ES6 的解构语法，不用考虑参数的顺序。</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logicProcessingFunction</span>(<span class=\"params\">&#123;name, age, gender, height, weight, hobby = <span class=\"string\">&#x27;钓鱼&#x27;</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name, age, gender, height, weight, hobby)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhangSan&#x27;</span>, <span class=\"attr\">age</span>:<span class=\"number\">3</span> , <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;男&#x27;</span>, <span class=\"attr\">height</span>:<span class=\"number\">180</span>, <span class=\"attr\">weight</span>: <span class=\"number\">80</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">logicProcessingFunction(data)</span><br></pre></td></tr></table></figure>\n<h1 id=\"每个方法只做一件事情\"><a href=\"#每个方法只做一件事情\" class=\"headerlink\" title=\"每个方法只做一件事情\"></a>每个方法只做一件事情</h1><p>在处理一个需求的时候，将需求拆分细化：<br>例如，第一步、第二步、第三步<br>或者，第一种情况、第二种情况、第三种情况<br>这样有利于维护,处理事件的逻辑不会混乱</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getUserInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ajax( <span class=\"string\">&#x27;http:// xxx.com/userInfo&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">&#x27;userId: &#x27;</span> + data.userId );</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">&#x27;userName: &#x27;</span> + data.userName );</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">&#x27;nickName: &#x27;</span> + data.nickName );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//改成：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getUserInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ajax( <span class=\"string\">&#x27;http:// xxx.com/userInfo&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>)</span>&#123;</span><br><span class=\"line\">        printDetails( data );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> printDetails = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">&#x27;userId: &#x27;</span> + data.userId );</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">&#x27;userName: &#x27;</span> + data.userName );</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">&#x27;nickName: &#x27;</span> + data.nickName );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"把条件分支语句提炼成函数\"><a href=\"#把条件分支语句提炼成函数\" class=\"headerlink\" title=\"把条件分支语句提炼成函数\"></a>把条件分支语句提炼成函数</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getPrice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> price </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( date.getMonth() &gt;= <span class=\"number\">6</span> &amp;&amp; date.getMonth() &lt;= <span class=\"number\">9</span> )&#123;    <span class=\"comment\">// 夏天</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> price * <span class=\"number\">0.8</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改成</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSummer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> date.getMonth() &gt;= <span class=\"number\">6</span> &amp;&amp; date.getMonth() &lt;= <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getPrice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> price </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( isSummer() )&#123;    <span class=\"comment\">// 夏天</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> price * <span class=\"number\">0.8</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">Person.prototype.addAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age++;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">Person.prototype.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">addAge</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setName</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"尽量不要写全局方法\"><a href=\"#尽量不要写全局方法\" class=\"headerlink\" title=\"尽量不要写全局方法\"></a>尽量不要写全局方法</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Bad:</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.diff = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diff</span>(<span class=\"params\">comparisonArray</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hash = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(comparisonArray);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.filter(<span class=\"function\"><span class=\"params\">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Good:</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperArray</span> <span class=\"keyword\">extends</span> <span class=\"title\">Array</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">diff</span>(<span class=\"params\">comparisonArray</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hash = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(comparisonArray);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.filter(<span class=\"function\"><span class=\"params\">elem</span> =&gt;</span> !hash.has(elem));        </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"今天你学习了么？","link_list":[{"name":"江橙","link":"https://blogs.chenghuizi.com/","avatar":"/imgs/motuo1.jpeg","descr":"技术了不得"},{"name":"娄豪杰","link":"https://louhaojie99.top/","avatar":"/imgs/motuo2.jpeg","descr":"人生就像品茗，懂得吃苦，才能回甘啊"}]}]}},"cover":"/imgs/4.jpg","excerpt":"","more":"<h1 id=\"判断执行\"><a href=\"#判断执行\" class=\"headerlink\" title=\"判断执行\"></a>判断执行</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(el)&#123;</span><br><span class=\"line\"> query(el)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">el &amp;&amp; query(el)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(el)&#123;</span><br><span class=\"line\"> el = query(el)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">el = el &amp;&amp; query(el);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!el) <span class=\"keyword\">return</span></span><br><span class=\"line\">el = query(el)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否存执行方法  或者读取数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> object = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">hobby</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"string\">&#x27;钓鱼&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>:<span class=\"string\">&#x27;滑板&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 意思是如果object存在就取hobby(否则终止),如果hobby存在就取a(否则终止)。当有一个不存在的时候就取|| 后面的默认值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = object?.hobby?.a || <span class=\"string\">&#x27;暂无数据&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// || 与 ??</span></span><br><span class=\"line\"><span class=\"comment\">// ?? 只会过 null 与 undefined</span></span><br><span class=\"line\"><span class=\"comment\">// || 当数据为 &#x27;&#x27;, 0, null, undefined, false 都会走默认值</span></span><br><span class=\"line\">axios.get(<span class=\"string\">&#x27;/...&#x27;</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(res.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.data = res.data || &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">axios.get(<span class=\"string\">&#x27;/...&#x27;</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(res.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.data = res.data ?? &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"少用三目运算符\"><a href=\"#少用三目运算符\" class=\"headerlink\" title=\"少用三目运算符\"></a>少用三目运算符</h1><p>这个我个人理解是如果判断的东西非常简单，就是用三目(判断有两种情况，对应两种值、或者两个方法)<br>如果情况来判断比较多 就使用if（判断的东西有三种情况，对应三种）<br>如果更多的话就使用switch</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> whether = <span class=\"literal\">true</span></span><br><span class=\"line\">whether ？ <span class=\"built_in\">this</span>.yes() : <span class=\"built_in\">this</span>.no()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.beLessThan()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(index === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.equal()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.moreThanThe()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (index) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"传参使用默认值\"><a href=\"#传参使用默认值\" class=\"headerlink\" title=\"传参使用默认值\"></a>传参使用默认值</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logicProcessingFunction</span>(<span class=\"params\"> name = <span class=\"string\">&#x27;defaults&#x27;</span> </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用-Object-assign-设置默认属性\"><a href=\"#使用-Object-assign-设置默认属性\" class=\"headerlink\" title=\"使用 Object.assign 设置默认属性\"></a>使用 Object.assign 设置默认属性</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> menuConfig = &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Order&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">body</span>: <span class=\"string\">&#x27;Send&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config = <span class=\"built_in\">Object</span>.assign(&#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;Foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: <span class=\"string\">&#x27;Bar&#x27;</span></span><br><span class=\"line\">  &#125;, config);</span><br><span class=\"line\">  <span class=\"comment\">// config : &#123;title: &quot;Order&quot;, body: &quot;Bar&quot;&#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">createMenu(menuConfig);</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数参数-最好-2-个或更少-，如果参数超过两个，建议使用-ES6-的解构语法，不用考虑参数的顺序。\"><a href=\"#函数参数-最好-2-个或更少-，如果参数超过两个，建议使用-ES6-的解构语法，不用考虑参数的顺序。\" class=\"headerlink\" title=\"函数参数( 最好 2 个或更少 )，如果参数超过两个，建议使用 ES6 的解构语法，不用考虑参数的顺序。\"></a>函数参数( 最好 2 个或更少 )，如果参数超过两个，建议使用 ES6 的解构语法，不用考虑参数的顺序。</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logicProcessingFunction</span>(<span class=\"params\">&#123;name, age, gender, height, weight, hobby = <span class=\"string\">&#x27;钓鱼&#x27;</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name, age, gender, height, weight, hobby)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhangSan&#x27;</span>, <span class=\"attr\">age</span>:<span class=\"number\">3</span> , <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;男&#x27;</span>, <span class=\"attr\">height</span>:<span class=\"number\">180</span>, <span class=\"attr\">weight</span>: <span class=\"number\">80</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">logicProcessingFunction(data)</span><br></pre></td></tr></table></figure>\n<h1 id=\"每个方法只做一件事情\"><a href=\"#每个方法只做一件事情\" class=\"headerlink\" title=\"每个方法只做一件事情\"></a>每个方法只做一件事情</h1><p>在处理一个需求的时候，将需求拆分细化：<br>例如，第一步、第二步、第三步<br>或者，第一种情况、第二种情况、第三种情况<br>这样有利于维护,处理事件的逻辑不会混乱</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getUserInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ajax( <span class=\"string\">&#x27;http:// xxx.com/userInfo&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">&#x27;userId: &#x27;</span> + data.userId );</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">&#x27;userName: &#x27;</span> + data.userName );</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">&#x27;nickName: &#x27;</span> + data.nickName );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//改成：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getUserInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ajax( <span class=\"string\">&#x27;http:// xxx.com/userInfo&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>)</span>&#123;</span><br><span class=\"line\">        printDetails( data );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> printDetails = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">&#x27;userId: &#x27;</span> + data.userId );</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">&#x27;userName: &#x27;</span> + data.userName );</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">&#x27;nickName: &#x27;</span> + data.nickName );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"把条件分支语句提炼成函数\"><a href=\"#把条件分支语句提炼成函数\" class=\"headerlink\" title=\"把条件分支语句提炼成函数\"></a>把条件分支语句提炼成函数</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getPrice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> price </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( date.getMonth() &gt;= <span class=\"number\">6</span> &amp;&amp; date.getMonth() &lt;= <span class=\"number\">9</span> )&#123;    <span class=\"comment\">// 夏天</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> price * <span class=\"number\">0.8</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改成</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSummer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> date.getMonth() &gt;= <span class=\"number\">6</span> &amp;&amp; date.getMonth() &lt;= <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getPrice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> price </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( isSummer() )&#123;    <span class=\"comment\">// 夏天</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> price * <span class=\"number\">0.8</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">Person.prototype.addAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age++;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">Person.prototype.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">addAge</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setName</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"尽量不要写全局方法\"><a href=\"#尽量不要写全局方法\" class=\"headerlink\" title=\"尽量不要写全局方法\"></a>尽量不要写全局方法</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Bad:</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.diff = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diff</span>(<span class=\"params\">comparisonArray</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hash = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(comparisonArray);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.filter(<span class=\"function\"><span class=\"params\">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Good:</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperArray</span> <span class=\"keyword\">extends</span> <span class=\"title\">Array</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">diff</span>(<span class=\"params\">comparisonArray</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hash = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(comparisonArray);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.filter(<span class=\"function\"><span class=\"params\">elem</span> =&gt;</span> !hash.has(elem));        </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckythr9eq0003y4swd2pxfz8h","tag_id":"ckythr9er0006y4swddwle1m7","_id":"ckythr9et000ay4swepvjepyt"},{"post_id":"ckythr9er0005y4swh6bc7tz9","tag_id":"ckythr9er0006y4swddwle1m7","_id":"ckythr9eu000by4sw9il7ee82"},{"post_id":"ckythr9ez000cy4sw342c74kg","tag_id":"ckythr9er0006y4swddwle1m7","_id":"ckythr9f0000dy4swhyy14s16"}],"Tag":[{"name":"js","_id":"ckythr9er0006y4swddwle1m7"}]}}